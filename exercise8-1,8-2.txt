演習8-1-1
ビジネスロジックをアプリケーションコードで実装することの是非を述べよ


 ビジネスロジックは、アプリケーションコードで実装すべきである。まず、ビジネスロジックの定義があいまいであることが多いため、ここでの定義として「システムにおいて、そのシステムとしての実際の動作をする部分」という定義とする。そのため、ビジネスロジックがなければ実際にプログラムがそのシステム固有の動作を行わないため必要であると考えられる。
 一方でアプリケーションコードにてビジネスロジックを実装する際には、機能ごとに分けて実装すべきであると考えられる。例を挙げると、お客様からある一部分の仕様変更を求められた際にビジネスロジックを分けて実装していない場合に全体の修正が必要になってしまう。そのため、ビジネスロジックを分けて実装していれば仕様変更の箇所の修正のみで済むため、ビジネスロジックは分けて実装すべきである。


演習8-1-2
ビジネスロジックをデータベースのトリガーで実装することの是非を述べよ


 ビジネスロジックをトリガーで実装することは反対である。トリガーとは、特定のテーブルに対する操作をトリガーとして、あらかじめ定義された処理を自動的に実行する機能のことである。データベース側の操作のみで自動的なデータ操作を行うことができるメリットがある。
 一方でテーブル間の依存性が高くなることが問題点として挙げられる。自動的なデータ操作が他のテーブルで行われるということは、トリガーが起動しなければ対象のテーブル操作が行われないということでもあり、お互いのテーブルの依存性を高めてしまう危険性があると考えられる。また、トリガーを実装してビジネスロジックの内容全体を把握することが困難になってしまうと考えられる。仕様変更の際にロジックを修正するときにアプリケーションのみならずデータベース側も考慮して修正しなければならないため、ビジネスロジック全体を理解することが困難になり、修正コストが高くなると考えられる。
 結論として、メリットよりもデメリットの方が多く正しく使用できるのであれば使用すべきであるが、データベース初心者など知見のない人間は注意深く使用しなければならないため慎重に運用すべきかを検討する必要があると考えられる。


演習8-2
一時テーブルの機能について調べ、使うことの是非を述べよ


 一時テーブルとは通常のテーブルと異なり、セッションが終了すると自動的に削除されるテーブルであり、一時的にデータを保存しておく場合に便利であるテーブルである。利点としては大量のデータの中間処理に使用する場合に便利であること、テーブル構造のテストが容易である、複数のクエリにまたがる処理が容易であるなどのメリットがあり、上記のような処理をしたい場合には積極的に使用すべきであると考えられる。しかし複雑なクエリの場合処理速度の遅延を招くことがある、大量のデータを一時テーブルに格納するのに向いていないなどの欠点がある。そのため、欠点を考慮しつつ適切な用途で使われるべきであると考えられる。